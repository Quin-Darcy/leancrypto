option('sha2-256', type: 'feature', value: 'enabled',
       description: 'SHA2-256 support')
option('sha2-512', type: 'feature', value: 'enabled',
       description: 'SHA2-512 support')
option('sha3', type: 'feature', value: 'enabled',
       description: 'SHA3 support')

option('ascon', type: 'feature', value: 'enabled',
       description: '''Ascon message digest and AEAD support

This option enables the Ascon-128, Ascon-128a, AEAD and message digest support
as well as Ascon-XOF and Ascon-XOFa.
''')

option('ascon_keccak', type: 'feature', value: 'enabled',
       description: '''Ascon-Keccak AEAD support

This option enables the Ascon-Keccak 256, and Ascon-Keccak 512 AEAD. Note, this
requires also SHA-3 being enabled.
''')

option('chacha20', type: 'feature', value: 'enabled',
       description: 'ChaCha20 support')
option('chacha20_drng', type: 'feature', value: 'enabled',
       description: 'ChaCha20 DRNG support')

option('drbg_hash', type: 'feature', value: 'enabled',
       description: 'Hash DRBG')
option('drbg_hmac', type: 'feature', value: 'enabled',
       description: 'HMAC DRBG')

option('hash_crypt', type: 'feature', value: 'enabled',
       description: 'Hash-Crypt support')

option('hmac', type: 'feature', value: 'enabled',
       description: 'HMAC support')

option('hkdf', type: 'feature', value: 'enabled',
       description: 'HKDF')
option('kdf_ctr', type: 'feature', value: 'enabled',
       description: 'KDF Counter Mode')
option('kdf_fb', type: 'feature', value: 'enabled',
       description: 'KDF Feedback Mode')
option('kdf_dpi', type: 'feature', value: 'enabled',
       description: 'KDF Double Pipeline Mode')
option('pbkdf2', type: 'feature', value: 'enabled',
       description: 'Password-Based Key Derivation version 2')

option('kmac', type: 'feature', value: 'enabled',
       description: 'KMAC support')
option('kmac_drng', type: 'feature', value: 'enabled',
       description: 'KMAC DRNG support')
option('cshake_drng', type: 'feature', value: 'enabled',
       description: 'cSHAKE DRNG support')
option('xdrbg', type: 'feature', value: 'enabled',
       description: 'XDRBG support')

option('hotp', type: 'feature', value: 'enabled',
       description: 'HOTP support')
option('totp', type: 'feature', value: 'enabled',
       description: 'HOTP support')

option('dilithium_87', type: 'feature', value: 'enabled',
       description: '''Dilithium-87 Support

Per default, Dilithium-87 is enabled and accessible with the regular API.
''')
option('dilithium_65', type: 'feature', value: 'enabled',
       description: '''Dilithium-65 Support

Per default, Dilithium-87 is enabled and accessible with the regular API. When
enabling this option, Dilithium-65 is also made available which has the same API,
but instead of the prefix lc_dilithium, all APIs use lc_dilithium_65. This
algorithm has 192 bits of security strength.
''')
option('dilithium_44', type: 'feature', value: 'enabled',
       description: '''Dilithium-44 Support

Per default, Dilithium-87 is enabled and accessible with the regular API. When
enabling this option, Dilithium-44 is also made available which has the same API,
but instead of the prefix lc_dilithium, all APIs use lc_dilithium_44. This
algorithm has 128 bits of security strength.
''')
option('dilithium_ed25519', type: 'feature', value: 'enabled',
       description: 'Dilithium-ED25519 KEM')

option('kyber_1024', type: 'feature', value: 'enabled',
       description: '''Kyber-1024 Support

Per default, Kyber-1024 is enabled and accessible with the regular API.
''')
option('kyber_768', type: 'feature', value: 'enabled',
       description: '''Kyber-768 Support

Per default, Kyber-1024 is enabled and accessible with the regular API. When
enabling this option, Kyber-768 is also made available which has the same API,
but instead of the prefix lc_kyber_1024, all APIs use lc_kyber_768. This
algorithm has 192 bits of security strength.
''')
option('kyber_512', type: 'feature', value: 'enabled',
       description: '''Kyber-512 Support

Per default, Kyber-1024 is enabled and accessible with the regular API. When
enabling this option, Kyber-512 is also made available which has the same API,
but instead of the prefix lc_kyber_1024, all APIs use lc_kyber_512. This
algorithm has 128 bits of security strength.
''')
option('kyber_x25519', type: 'feature', value: 'enabled',
       description: 'Kyber-X25519 KEM')

option('bike_5', type: 'feature', value: 'enabled',
       description: '''BIKE Category 5 Support

Per default, BIKE with NIST category 5 is enabled and accessible with the
regular API.
''')
option('bike_3', type: 'feature', value: 'enabled',
       description: '''BIKE Category 3 Support

Per default, BIKE category 5 is enabled and accessible with the regular API.
When enabling this option, BIKE category 3 is also made available which has the
same API, but instead of the prefix lc_bike_5, all APIs use lc_bike_3. This
algorithm has 192 bits of security strength.
''')
option('bike_1', type: 'feature', value: 'enabled',
       description: '''BIKE Category 1 Support

Per default, BIKE category 5 is enabled and accessible with the regular API.
When enabling this option, BIKE category 1 is also made available which has the
same API, but instead of the prefix lc_bike_5, all APIs use lc_bike_1. This
algorithm has 128 bits of security strength.
''')

option('aes_block', type: 'feature', value: 'enabled',
       description: 'AES block cipher support (encryption of one block)')
option('aes_ecb', type: 'feature', value: 'disabled',
       description: 'AES ECB cipher support - this is a weak algorithm, do not use!')
option('aes_cbc', type: 'feature', value: 'enabled',
       description: 'AES CBC cipher support')
option('aes_ctr', type: 'feature', value: 'enabled',
       description: 'AES CTR cipher support')
option('aes_kw', type: 'feature', value: 'enabled',
       description: 'AES KW cipher support')

option('small_stack', type: 'feature', value: 'disabled',
       description: 'Compile leancrypto with stack use <= 2048 bytes')

option('enable_selftests', type: 'feature', value: 'enabled',
       description: 'Compile and enable the self tests for all algorithms invoked before first use')

option('seedsource', type: 'combo', value: 'builtin',
	choices: ['builtin',
		  'esdm',
		 ],
	description: '''Select the seed source for leancrypto

The seed source for the lc_seeded_rng is determined at compile time. The builtin
source uses the standard operating system seed source like getrandom or
getentropy system calls. But other seed sources are allowed to be specified.
''')

option('apps', type: 'feature', value: 'enabled',
       description: '''Build helper apps

The leancrypto library offers a set of applications that work as
drop-in-replacement for the corresponding apps offered by other environments.
These include the known sha*sum applications.
''')

################################################################################
# DEBUGGING OPTIONS - NONE OF THEM ARE TO BE ENABLED IN PRODUCTION CODE!!
################################################################################

option('kyber_debug', type: 'feature', value: 'disabled',
       description: 'DEBUGGING: Kyber debug printout - DO NOT ENABLE IN PRODUCTION SYSTEMS!')

option('dilithium_debug', type: 'feature', value: 'disabled',
       description: 'DEBUGGING: Dilithium debug printout - DO NOT ENABLE IN PRODUCTION SYSTEMS!')

option('timecop', type: 'feature', value: 'disabled',
       description: '''DEBUGGING: enable TIMECOP - DO NOT ENABLE IN PRODUCTION SYSTEMS!

From https://www.post-apocalyptic-crypto.org/timecop/ - Most timing
side-channels are rooted in one of the following three causes:

Conditional jumps based on secret data, e.g. if(key[i] == 0)
Table lookups at secret indices, e.g. s[i] = substitution_table[key[i]]
Variable-time CPU instructions operating on secret data, e.g. key[i] / c

Adam Langley described in 2010 how the first two types can be detected automatically using Valgrind
(https://www.imperialviolet.org/2010/04/01/ctgrind.html). When enabling this
option, Valgrind is used to check for such issues. Once compiled with this
option enabled, the test applications need to be executed with
`valgrind --track-origins=yes <application>`. An issue is found if valgrind
reports a "Conditional jump or move depends on uninitialised value(s)".

This code requires the presence of Valgrind header files.
''')
