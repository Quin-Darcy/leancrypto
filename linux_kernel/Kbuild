#
# leancrypto Kernel module configuration options
#
# Usage: Comment out the respective configuration lines below if you do not
#	 require the respective option. Please mind the dependencies as
#	 mentioned for each option as there is (currently) no automated
#	 dependency resolution
#

########################### Message Digest Algorithms ##########################

#
# Enable SHA2-256 support
# Dependencies: N/A
#
CONFIG_LEANCRYPTO_SHA2_256=y

#
# Enable SHA2-512 support
# Dependencies: N/A
#
CONFIG_LEANCRYPTO_SHA2_512=y

#
# Enable SHA-3 support including all its variants (SHAKE, cSHAKE)
# Dependencies: N/A
#
CONFIG_LEANCRYPTO_SHA3=y

####################### Keyed Message Digest Algorithms ########################

#
# Enable FIPS 198 HMAC support
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256 or CONFIG_LEANCRYPTO_SHA2_512 or
#		CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_HMAC=y

#
# Enable SP800-185 KMAC support
# Dependencies: CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_KMAC=y

####################### Symmetric Encryption Algorithms ########################

#
# Enable ChaCha20 stream cipher algorithm
# Dependencies: N/A
#
CONFIG_LEANCRYPTO_CHACHA20=y

#
# Enable AES block algorithm
# Dependencies: N/A
#
CONFIG_LEANCRYPTO_AES=y

#
# Enable AES CBC algorithm
# Dependencies: CONFIG_LEANCRYPTO_AES
#
CONFIG_LEANCRYPTO_AES_CBC=y

#
# Enable AES CTR algorithm
# Dependencies: CONFIG_LEANCRYPTO_AES
#
CONFIG_LEANCRYPTO_AES_CTR=y

#
# Enable AES KW algorithm
# Dependencies: CONFIG_LEANCRYPTO_AES
#
CONFIG_LEANCRYPTO_AES_KW=y

####### Authenticated Encryption with Additional Data (AEAD) Algorithms ########

#
# Enable AEAD stream cipher algorithm based on SHA2-512
# Dependencies: CONFIG_LEANCRYPTO_SHA2_512 and CONFIG_LEANCRYPTO_HASH_DRBG
#
CONFIG_LEANCRYPTO_HASH_CRYPT=y

#
# Enable AEAD stream cipher algorithm based on cSHAKE
# Dependencies: CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_CSHAKE_CRYPT=y

#
# Enable AEAD stream cipher algorithm based on KMAC
# Dependencies: CONFIG_LEANCRYPTO_KMAC
#
CONFIG_LEANCRYPTO_KMAC_CRYPT=y

#
# Enable AEAD stream cipher algorithm based on symmetric algorithm and HMAC
# Dependencies: CONFIG_LEANCRYPTO_HMAC and at least one of
#		CONFIG_LEANCRYPTO_AES_*
#
CONFIG_LEANCRYPTO_SYMHMAC_CRYPT=y

#
# Enable AEAD stream cipher algorithm based on symmetric algorithm and KMAC
# Dependencies: CONFIG_LEANCRYPTO_KMAC and at least one of
#		CONFIG_LEANCRYPTO_AES_*
#
CONFIG_LEANCRYPTO_SYMKMAC_CRYPT=y

#################### Deterministic Random Number Generator #####################

#
# Enable ChaCha20-based deterministic random number generator
# Dependencies: CONFIG_LEANCRYPTO_CHACHA20
#
CONFIG_LEANCRYPTO_CHACHA20_DRNG=y

#
# Enable SP800-90A Hash DRBG
# Dependencies: CONFIG_LEANCRYPTO_SHA2_512
#
CONFIG_LEANCRYPTO_HASH_DRBG=y

#
# Enable SP800-90A HMAC DRBG
# Dependencies: CONFIG_LEANCRYPTO_SHA2_512 and CONFIG_LEANCRYPTO_HMAC
#
CONFIG_LEANCRYPTO_HMAC_DRBG=y

#
# Enable KMAC-based DRNG
# Dependencies: CONFIG_LEANCRYPTO_KMAC
#
CONFIG_LEANCRYPTO_KMAC_DRNG=y

#
# Enable cSHAKE-based DRNG
# Dependencies: CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_CSHAKE_DRNG=y

#
# Enable SHAKE-based DRNG
# Dependencies: CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_XDRBG256_DRNG=y

########################### Key Derivation Functions ###########################

#
# Enable HKDF (RFC5869)
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256
#
CONFIG_LEANCRYPTO_HKDF=y

#
# Enable SP800-108 counter KDF
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256
#
CONFIG_LEANCRYPTO_KDF_CTR=y

#
# Enable SP800-108 double pipeline KDF
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256
#
CONFIG_LEANCRYPTO_KDF_DPI=y

#
# Enable SP800-108 feedback KDF
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256
#
CONFIG_LEANCRYPTO_KDF_FB=y

#
# Enable SP800-132 Password-Based Key Derivation Function (PBKDF2)
# Dependencies: CONFIG_LEANCRYPTO_SHA2_256
#
CONFIG_LEANCRYPTO_PBKDF2=y

########################### Key Encapsulation Method ###########################

#
# Enable Key Encapsulation Mechanism provided by Kyber
# Dependencies: CONFIG_LEANCRYPTO_SHA3
#
CONFIG_LEANCRYPTO_KEM=y

#
# Enable Key Encapsulation Mechanism provided by Kyber in collaboration with
# X25519
# Dependencies: CONFIG_LEANCRYPTO_KEM
#
# Note: When disabling this option, lc_kyber.awk needs to be changed at the
#	marked location.
#
CONFIG_LEANCRYPTO_KEM_X25519=y

############################## Digital Signatures ##############################

#
# Enable Dilithium Digital Signature Mechanism
# Dependencies: CONFIG_LEANCRYPTO_SHA3 and CONFIG_LEANCRYPTO_KMAC
#
CONFIG_LEANCRYPTO_DILITHIUM=y

#
# Enable Dilithium Digital Signature Mechanism in collaboration with
# EDDSA with ED25519
# Dependencies: CONFIG_LEANCRYPTO_DILITHIUM
#
# Note: When disabling this option, lc_dilithium.awk needs to be changed at the
#	marked location.
#
CONFIG_LEANCRYPTO_DILITHIUM_ED25519=y

############################ Power-Up Health Tests #############################

#
# Enable Power-Up health test for all algorithms
# Dependencies: none
#
CONFIG_LEANCRYPTO_HEALTH_TEST=y

########################## No Changes Below This Line ##########################

ifdef CONFIG_LEANCRYPTO_KEM_X25519
CONFIG_LEANCRYPTO_CURVE25519=y
endif
ifdef CONFIG_LEANCRYPTO_DILITHIUM_ED25519
CONFIG_LEANCRYPTO_CURVE25519=y
endif

obj-m		 		:= leancrypto.o

# Kernel module framework
ccflags-y			:= -I$(PWD) -DLINUX_KERNEL -DLC_MEM_ON_HEAP    \
				   -DMAJVERSION=0 -DMINVERSION=9 -DPATCHLEVEL=0

ifdef CONFIG_X86_64
ccflags-y			+= -DLC_HOST_X86_64			       \
				    -mavx2 -mbmi2 -mpopcnt		       \
				    -Wno-unused-command-line-argument
else ifdef CONFIG_ARM64
ccflags-y			+= -DLC_HOST_AARCH64			       \
				   -march=armv8-a+simd -Wno-unused-result
else ifneq ($(and $(CONFIG_RISCV),$(CONFIG_64BIT)),)
ccflags-y			+= -DLC_HOST_RISCV64
endif

ifdef CONFIG_LEANCRYPTO_HEALTH_TEST
ccflags-y			+= -DLC_SELFTEST_ENABLED
endif

ifdef CONFIG_ARM64
ccflags-y			+= -mno-outline-atomics
endif
leancrypto-y			+= posix_support.o			       \
				   leancrypto_kernel.o

# Internal helper code
ccflags-y			+= -I$(PWD)/../internal/api
leancrypto-y			+= ../internal/src/left_encode.o	       \
				   ../internal/src/compare.o		       \
				   ../internal/src/null_buffer.o	       \
				   ../internal/src/status.o

# CPU Features Support
ifdef CONFIG_X86
leancrypto-y	  		+= ../internal/src/cpufeatures_x86.o
else ifdef CONFIG_ARM
leancrypto-y	  		+= cpufeatures_arm32_linux_kernel.o
else ifdef CONFIG_ARM64
leancrypto-y	  		+= ../internal/src/cpufeatures_arm64_native.o
else
leancrypto-y	 		+= ../internal/src/cpufeatures_none.o
endif

# Special Memset Support
ifdef CONFIG_X86_64
leancrypto-y	  		+= ../internal/src/memcmp_secure_avx2.o
else
leancrypto-y	 		+= ../internal/src/memcmp_secure_c.o
endif

obj-m				+= status_tester.o
obj-m				+= rerun_selftests_tester.o

status_tester-y			+= ../internal/tests/status_tester.o
rerun_selftests_tester-y	+= ../internal/tests/rerun_selftests_tester.o

# Hash implementation
ccflags-y	 		+= -I$(PWD)/../hash/api
leancrypto-y	  		+= ../hash/src/hash.o

leancrypto-$(CONFIG_LEANCRYPTO_SHA2_256)				       \
				+= ../hash/src/sha256.o
ifdef CONFIG_LEANCRYPTO_SHA2_256
obj-m				+= sha256_tester.o
sha256_tester-y			+= ../hash/tests/sha256_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_SHA2_512)				       \
				+= ../hash/src/sha512.o
ifdef CONFIG_LEANCRYPTO_SHA2_512
obj-m				+= sha512_tester.o
sha512_tester-y			+= ../hash/tests/sha512_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/cshake.o			       \
				   ../hash/src/sha3_selector.o		       \
				   ../hash/src/sha3_selftest.o		       \
				   ../hash/src/sha3_c.o
ifdef CONFIG_LEANCRYPTO_SHA3
obj-m				+= cshake_128_tester.o
obj-m				+= cshake_256_tester.o
obj-m				+= cshake_ctx_256_tester.o
obj-m				+= sha3-224_tester.o
obj-m				+= sha3-256_tester.o
obj-m				+= sha3-384_tester.o
obj-m				+= sha3-512_tester.o
obj-m				+= shake128_tester.o
obj-m				+= shake256_tester.o
obj-m				+= shake_squeeze_more_tester.o

cshake_128_tester-y		+= ../hash/tests/cshake_128_tester.o
cshake_256_tester-y		+= ../hash/tests/cshake_256_tester.o
cshake_ctx_256_tester-y		+= ../hash/tests/cshake_ctx_256_tester.o
sha3-224_tester-y		+= ../hash/tests/sha3-224_tester.o
sha3-256_tester-y		+= ../hash/tests/sha3-256_tester.o
sha3-384_tester-y		+= ../hash/tests/sha3-384_tester.o
sha3-512_tester-y		+= ../hash/tests/sha3-512_tester.o
shake128_tester-y		+= ../hash/tests/shake128_tester.o
shake256_tester-y		+= ../hash/tests/shake256_tester.o
shake_squeeze_more_tester-y	+= ../hash/tests/shake_squeeze_more_tester.o
endif

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_avx2.o		       \
				   ../hash/src/asm/AVX2/KeccakP-1600-AVX2.o
else
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_avx2_null.o
endif

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_avx512.o		       \
				   ../hash/src/asm/AVX512/KeccakP-1600-AVX512.o
else
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_avx512_null.o
endif

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../hash/src/shake_4x_avx2.o		       \
				   ../hash/src/asm/AVX2_4x/KeccakP-1600-times4-SIMD256.o
endif

# ARM Neon support
ifdef CONFIG_ARM64
ccflags-y	  		+= -I$(PWD)/../hash/src/asm/ARMv8A/
asflags-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= -march=armv8-a+simd			       \
				   -funsafe-math-optimizations
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_arm_neon.o		       \
				   ../hash/src/asm/ARMv8A/KeccakP-1600-armv8a-neon.o
else ifdef CONFIG_ARM
ccflags-y	  		+= -I$(PWD)/../hash/src/asm/ARMv7A-NEON
asflags-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= -mfpu=neon-vfpv4			       \
				   -mthumb				       \
				   -march=armv7-a+vfpv4			       \
				   -mfloat-abi=softfp			       \
				   -funsafe-math-optimizations
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_arm_neon.o		       \
				   ../hash/src/asm/ARMv7A-NEON/KeccakP-1600-armv7a-le-neon-gcc.o
else
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_arm_neon_null.o
endif

# Generic ARM assembler and ARM CE support
ifdef CONFIG_ARM64
asflags-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= -I$(PWD)/../internal/api -DLINUX_KERNEL
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_arm_asm.o		       \
				   ../hash/src/sha3_arm_ce.o		       \
				   ../hash/src/asm/ARMv8A/KeccakP-1600-armv8a-ce.o
else
leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_arm_asm_null.o	       \
				   ../hash/src/sha3_arm_ce_null.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_SHA3)					       \
				+= ../hash/src/sha3_riscv_asm_null.o

# AEAD implementation
ccflags-y	  		+= -I$(PWD)/../aead/api
leancrypto-$(CONFIG_LEANCRYPTO_SYMHMAC_CRYPT)				       \
				+= ../aead/src/symhmac.o
ifdef CONFIG_LEANCRYPTO_SYMHMAC_CRYPT
obj-m		  		+= symhmac_test.o
symhmac_test-y	  		+= ../aead/tests/symhmac_test.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_SYMKMAC_CRYPT)				       \
				+= ../aead/src/symkmac.o
ifdef CONFIG_LEANCRYPTO_SYMKMAC_CRYPT
obj-m		  		+= symkmac256_test.o symkmac128_test.o
symkmac256_test-y	  	+= ../aead/tests/symkmac256_test.o
symkmac128_test-y	  	+= ../aead/tests/symkmac128_test.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_HASH_CRYPT)				       \
				+= ../aead/src/hash_crypt.o
ifdef CONFIG_LEANCRYPTO_HASH_CRYPT
obj-m		  		+= hash_crypt_test.o
hash_crypt_test-y 		+= ../aead/tests/hash_crypt_test.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_CSHAKE_CRYPT)				       \
				+= ../aead/src/cshake_crypt.o
ifdef CONFIG_LEANCRYPTO_CSHAKE_CRYPT
obj-m		  		+= cshake_crypt_test.o
cshake_crypt_test-y		+= ../aead/tests/cshake_crypt_test.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_KMAC_CRYPT)				       \
				+= ../aead/src/kmac_crypt.o
ifdef CONFIG_LEANCRYPTO_KMAC_CRYPT
obj-m		  		+= kmac_crypt_test.o
kmac_crypt_test-y 		+= ../aead/tests/kmac_crypt_test.o
endif

# DRNG implementation
ccflags-y	  		+= -I$(PWD)/../drng/api -I$(PWD)/../drng/src
leancrypto-y			+= ../drng/src/seeded_rng.o		       \
				   ../drng/src/seeded_rng_linux_kernel.o

leancrypto-$(CONFIG_LEANCRYPTO_CHACHA20_DRNG)				       \
				+= ../drng/src/chacha20_drng.o
ifdef CONFIG_LEANCRYPTO_CHACHA20_DRNG
obj-m		  		+= chacha20_drng_tester.o
chacha20_drng_tester-y		+= ../drng/tests/chacha20_drng_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_HASH_DRBG)				       \
				+= ../drng/src/hash_drbg.o
ifdef CONFIG_LEANCRYPTO_HASH_DRBG
obj-m		  		+= hash_drbg_tester.o
hash_drbg_tester-y		+= ../drng/tests/hash_drbg_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_HMAC_DRBG)				       \
				+= ../drng/src/hmac_drbg.o
ifdef CONFIG_LEANCRYPTO_HMAC_DRBG
obj-m		  		+= hmac_drbg_tester.o
hmac_drbg_tester-y		+= ../drng/tests/hmac_drbg_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_KMAC_DRNG)				       \
				+= ../drng/src/kmac_drng.o
ifdef CONFIG_LEANCRYPTO_KMAC_DRNG
obj-m		 		+= kmac_drng_tester.o
kmac_drng_tester-y		+= ../drng/tests/kmac_drng_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_CSHAKE_DRNG)				       \
				+= ../drng/src/cshake_drng.o
ifdef CONFIG_LEANCRYPTO_CSHAKE_DRNG
obj-m				+= cshake_drng_tester.o
cshake_drng_tester-y		+= ../drng/tests/cshake_drng_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_XDRBG256_DRNG)				       \
				+= ../drng/src/xdrbg256.o
ifdef CONFIG_LEANCRYPTO_XDRBG256_DRNG
obj-m				+= xdrbg256_tester.o
xdrbg256_tester-y		+= ../drng/tests/xdrbg256_tester.o
endif

# HMAC implementation
ccflags-$(CONFIG_LEANCRYPTO_HMAC)					       \
				+= -I$(PWD)/../hmac/api
leancrypto-$(CONFIG_LEANCRYPTO_HMAC)					       \
				+= ../hmac/src/hmac.o

ifdef CONFIG_LEANCRYPTO_SHA2_256
leancrypto-$(CONFIG_LEANCRYPTO_HMAC)					       \
				+= ../hmac/src/hmac_sha256_selftest.o	       \
				   ../hmac/src/hmac_sha512_selftest_null.o     \
				   ../hmac/src/hmac_sha3_selftest_null.o
ifdef CONFIG_LEANCRYPTO_HMAC
obj-m				+= hmac_sha2_256_tester.o
hmac_sha2_256_tester-y		+= ../hmac/tests/hmac_sha2_256_tester.o
endif

else ifdef CONFIG_LEANCRYPTO_SHA2_512

leancrypto-$(CONFIG_LEANCRYPTO_HMAC)					       \
				+= ../hmac/src/hmac_sha256_selftest_null.o     \
				   ../hmac/src/hmac_sha512_selftest.o	       \
				   ../hmac/src/hmac_sha3_selftest_null.o
ifdef CONFIG_LEANCRYPTO_HMAC
obj-m		  		+= hmac_sha2_512_tester.o
hmac_sha2_512_tester-y		+= ../hmac/tests/hmac_sha2_512_tester.o
endif

else

leancrypto-$(CONFIG_LEANCRYPTO_HMAC)					       \
				+= ../hmac/src/hmac_sha256_selftest_null.o     \
				   ../hmac/src/hmac_sha512_selftest_null.o     \
				   ../hmac/src/hmac_sha3_selftest.o
ifdef CONFIG_LEANCRYPTO_HMAC
obj-m		 		+= hmac_sha3_224_tester.o
hmac_sha3_224_tester-y		+= ../hmac/tests/hmac_sha3_224_tester.o
endif

endif

# KDF implementation
ccflags-y	 		+= -I$(PWD)/../kdf/api
leancrypto-$(CONFIG_LEANCRYPTO_HKDF)					       \
				+= ../kdf/src/hkdf.o
ifdef CONFIG_LEANCRYPTO_HKDF
obj-m				+= hkdf_tester.o
hkdf_tester-y			+= ../kdf/tests/hkdf_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_KDF_CTR)					       \
				+= ../kdf/src/kdf_ctr.o
ifdef CONFIG_LEANCRYPTO_KDF_CTR
obj-m				+= kdf_ctr_tester.o
kdf_ctr_tester-y		+= ../kdf/tests/kdf_ctr_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_KDF_DPI)					       \
				+= ../kdf/src/kdf_dpi.o
ifdef CONFIG_LEANCRYPTO_KDF_DPI
obj-m				+= kdf_dpi_tester.o
kdf_dpi_tester-y		+= ../kdf/tests/kdf_dpi_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_KDF_FB)					       \
				+= ../kdf/src/kdf_fb.o
ifdef CONFIG_LEANCRYPTO_KDF_FB
obj-m				+= kdf_fb_tester.o
kdf_fb_tester-y			+= ../kdf/tests/kdf_fb_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_PBKDF2)					       \
				+= ../kdf/src/pbkdf2.o
ifdef CONFIG_LEANCRYPTO_PBKDF2
obj-m				+= pbkdf2_tester.o
pbkdf2_tester-y			+= ../kdf/tests/pbkdf2_tester.o
endif

# Required for Kyber and Dilithium self tests
leancrypto-y			+= ../drng/src/selftest_rng.o

ccflags-$(CONFIG_LEANCRYPTO_CURVE25519)					       \
				+= -I$(PWD)/../curve25519/api		       \
				   -I$(PWD)/../curve25519/src
leancrypto-$(CONFIG_LEANCRYPTO_CURVE25519)				       \
				+= ../curve25519/src/ed25519.o		       \
				   ../curve25519/src/ed25519_ref10.o	       \
				   ../curve25519/src/x25519.o		       \
				   ../curve25519/src/x25519_scalarmult_c.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_CURVE25519)				       \
				+= ../curve25519/src/avx/curve25519_avx.o      \
				   ../curve25519/src/avx/curve25519_avx_asm.o  \
				   ../curve25519/src/avx/fe51_invert.o	       \
				   ../curve25519/src/avx/fe_frombytes_avx.o
else
leancrypto-$(CONFIG_LEANCRYPTO_CURVE25519)				       \
				+= ../curve25519/src/x25519_scalarmult.o
endif

ifdef CONFIG_LEANCRYPTO_CURVE25519
obj-m				+= ed25519_tester.o
obj-m				+= x25519_c_tester.o

ed25519_tester-y		+= ../curve25519/tests/ed25519_tester.o	       \
				   ../drng/src/selftest_rng.o
x25519_c_tester-y		+= ../curve25519/tests/x25519_c_tester.o       \
				   ../drng/src/selftest_rng.o

ifdef CONFIG_X86_64
obj-m				+= x25519_avx_tester.o
x25519_avx_tester-y		+= ../curve25519/tests/x25519_c_tester.o       \
				   ../drng/src/selftest_rng.o
endif

endif

# KEM implementation
ccflags-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= -I$(PWD)/../kem/api -I$(PWD)/../kem/src
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/kyber_cbd.o		       \
				   ../kem/src/kyber_ies.o		       \
				   ../kem/src/kyber_indcpa.o		       \
				   ../kem/src/kyber_kem.o		       \
				   ../kem/src/kyber_kem_c.o		       \
				   ../kem/src/kyber_kex.o		       \
				   ../kem/src/kyber_poly.o		       \
				   ../kem/src/kyber_polyvec.o		       \
				   ../kem/src/kyber_selftest.o		       \
				   ../kem/src/kyber_selftest_kdf.o	       \
				   ../kem/src/kyber_verify.o		       \
				   ../kem/src/kyber_zetas.o

ifndef CONFIG_ARM
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/kyber_ntt.o
endif

# KEM-X25519 implementation
leancrypto-$(CONFIG_LEANCRYPTO_KEM_X25519)				       \
				+= ../kem/src/kyber_x25519_ies.o	       \
				   ../kem/src/kyber_x25519_kem.o	       \
				   ../kem/src/kyber_x25519_kex.o

ifdef CONFIG_X86_64
asflags-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= -I$(PWD)/../internal/api -DLINUX_KERNEL
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/avx2/kyber_basemul_avx2.o	       \
				   ../kem/src/avx2/kyber_cbd_avx2.o	       \
				   ../kem/src/avx2/kyber_consts_avx2.o	       \
				   ../kem/src/avx2/kyber_fq_avx2.o	       \
				   ../kem/src/avx2/kyber_indcpa_avx2.o	       \
				   ../kem/src/avx2/kyber_invntt_avx2.o	       \
				   ../kem/src/avx2/kyber_kem_api_avx2.o	       \
				   ../kem/src/avx2/kyber_kem_avx2.o	       \
				   ../kem/src/avx2/kyber_ntt_avx2.o	       \
				   ../kem/src/avx2/kyber_poly_avx2.o	       \
				   ../kem/src/avx2/kyber_rejsample_avx2.o      \
				   ../kem/src/avx2/kyber_shuffle_avx2.o
else ifdef CONFIG_ARM
asflags-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= -I$(PWD)/../internal/api -I$(PWD)/../kem/src/armv7
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/kyber_kem_api_c.o		       \
				   ../kem/src/armv7/kyber_fastinvntt_armv7.o   \
				   ../kem/src/armv7/kyber_fastntt_armv7.o      \
				   ../kem/src/armv7/kyber_ntt_armv7.o	       \
				   ../kem/src/armv7/kyber_poly_armv7.o
else ifdef CONFIG_ARM64
asflags-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= -I$(PWD)/../kem/src/armv8
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/armv8/kyber_add_armv8.o	       \
				   ../kem/src/armv8/kyber_basemul_armv8.o      \
				   ../kem/src/armv8/kyber_cbd_armv8.o	       \
				   ../kem/src/armv8/kyber_indcpa_armv8.o       \
				   ../kem/src/armv8/kyber_inv_ntt_armv8.o      \
				   ../kem/src/armv8/kyber_kem_api_armv8.o      \
				   ../kem/src/armv8/kyber_kem_armv8.o	       \
				   ../kem/src/armv8/kyber_ntt_armv8.o	       \
				   ../kem/src/armv8/kyber_ntt_armv8_asm.o      \
				   ../kem/src/armv8/kyber_poly_armv8.o	       \
				   ../kem/src/armv8/kyber_poly_armv8_asm.o     \
				   ../kem/src/armv8/kyber_reduce_armv8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_KEM)					       \
				+= ../kem/src/kyber_kem_api_c.o
endif

ifdef CONFIG_LEANCRYPTO_KEM
obj-m		 		+= kyber_kem_tester_c.o
obj-m		 		+= kyber_kem_tester_common.o
obj-m		 		+= kyber_kem_kdf_tester_c.o
obj-m		 		+= kyber_kem_kdf_tester_common.o
obj-m		 		+= kyber_kex_tester.o
obj-m		 		+= kyber_ies_tester.o
obj-m		 		+= kyber_invalid_tester.o

kyber_kem_tester_c-y		+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_tester_c.o	       \
				   ../drng/src/selftest_rng.o
kyber_kem_kdf_tester_c-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_kdf_tester_c.o       \
				   ../drng/src/selftest_rng.o
kyber_kem_tester_common-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_tester_common.o       \
				   ../drng/src/selftest_rng.o
kyber_kem_kdf_tester_common-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_kdf_tester_common.o  \
				   ../drng/src/selftest_rng.o
kyber_kex_tester-y  		+= ../kem/tests/kyber_kex_tester.o
kyber_ies_tester-y  		+= ../kem/tests/kyber_ies_tester.o	       \
				   ../drng/src/selftest_rng.o
kyber_invalid_tester-y  	+= ../kem/tests/kyber_invalid_tester.o
endif

ifdef CONFIG_LEANCRYPTO_KEM_X25519
obj-m				+= kyber_ies_x25519_tester.o
obj-m				+= kyber_kem_x25519_tester.o
obj-m				+= kyber_kex_x25519_tester.o

kyber_ies_x25519_tester-y	+= ../kem/tests/kyber_ies_x25519_tester.o      \
				   ../drng/src/selftest_rng.o
kyber_kem_x25519_tester-y	+= ../kem/tests/kyber_kem_x25519_tester.o      \
				   ../drng/src/selftest_rng.o
kyber_kex_x25519_tester-y	+= ../kem/tests/kyber_kex_x25519_tester.o      \
				   ../drng/src/selftest_rng.o
endif

ifdef CONFIG_X86_64
ifdef CONFIG_LEANCRYPTO_KEM
obj-m		  		+= kyber_kem_tester_avx2.o
obj-m		  		+= kyber_kem_kdf_tester_avx2.o

kyber_kem_tester_avx2-y		+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_tester_avx2.o	       \
				   ../drng/src/selftest_rng.o
kyber_kem_kdf_tester_avx2-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_kdf_tester_avx2.o    \
				   ../drng/src/selftest_rng.o

else ifdef CONFIG_ARM64
obj-m				+= kyber_kem_tester_armv8.o
obj-m				+= kyber_kem_kdf_tester_armv8.o

kyber_kem_tester_armv8-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_tester_armv8.o       \
				   ../drng/src/selftest_rng.o
kyber_kem_kdf_tester_armv8-y	+= ../kem/tests/kyber_kem_tester.o	       \
				   ../kem/tests/kyber_kem_kdf_tester_armv8.o   \
				   ../drng/src/selftest_rng.o
endif
endif

# KMAC implementation
ccflags-$(CONFIG_LEANCRYPTO_KMAC)					       \
				+= -I$(PWD)/../kmac/api
leancrypto-$(CONFIG_LEANCRYPTO_KMAC)					       \
				+= ../kmac/src/kmac.o
ifdef CONFIG_LEANCRYPTO_KMAC
obj-m		  		+= kmac_128_tester.o
obj-m		  		+= kmac_256_tester.o
obj-m		  		+= kmac_xof_more_tester.o
obj-m		  		+= kmac_xof_tester.o

kmac_128_tester-y		+= ../kmac/tests/kmac_128_tester.o
kmac_256_tester-y		+= ../kmac/tests/kmac_256_tester.o
kmac_xof_more_tester-y		+= ../kmac/tests/kmac_xof_more_tester.o
kmac_xof_tester-y		+= ../kmac/tests/kmac_xof_tester.o
endif

# Signature implementation
ccflags-$(CONFIG_LEANCRYPTO_DILITHIUM)					       \
				+= -I$(PWD)/../signature/api
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM)				       \
				+= ../signature/src/dilithium_ntt.o	       \
				   ../signature/src/dilithium_poly.o	       \
				   ../signature/src/dilithium_rounding.o       \
				   ../signature/src/dilithium_selftest.o       \
				   ../signature/src/dilithium_signature_c.o

# KEM-X25519 implementation
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM_ED25519)			       \
				+= ../signature/src/dilithium_ed25519_signature.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM)				       \
			+= ../signature/src/avx2/dilithium_consts_avx2.o       \
			   ../signature/src/avx2/dilithium_invntt_avx2.o       \
			   ../signature/src/avx2/dilithium_ntt_avx2.o	       \
			   ../signature/src/avx2/dilithium_pointwise_avx2.o    \
			   ../signature/src/avx2/dilithium_poly_avx2.o	       \
			   ../signature/src/avx2/dilithium_polyvec_avx2.o      \
			   ../signature/src/avx2/dilithium_rejsample_avx2.o    \
			   ../signature/src/avx2/dilithium_rounding_avx2.o     \
			   ../signature/src/avx2/dilithium_signature_api_avx2.o\
			   ../signature/src/avx2/dilithium_signature_avx2.o    \
			   ../signature/src/avx2/dilithium_shuffle_avx2.o
else ifdef CONFIG_ARM
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM)				       \
			+= ../signature/src/armv7/dilithium_ntt_armv7.o	       \
			   ../signature/src/armv7/dilithium_pointwise_smull_armv7.o\
			   ../signature/src/armv7/dilithium_poly_armv7.o       \
			   ../signature/src/armv7/dilithium_poly.o	       \
			   ../signature/src/armv7/dilithium_signature_api_armv7.o\
			   ../signature/src/armv7/dilithium_signature_armv7.o
else ifdef CONFIG_ARM64
# Disable code for now as NEON support is needed
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM)				       \
			+= ../signature/src/armv8/dilithium_intt_armv8.o       \
			   ../signature/src/armv8/dilithium_ntt_armv8.o	       \
			   ../signature/src/armv8/dilithium_poly_armv8.o       \
			   ../signature/src/armv8/dilithium_signature_api_armv8.o\
			   ../signature/src/armv8/dilithium_signature_armv8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_DILITHIUM)				       \
			+= ../signature/src/dilithium_signature_api_c.o
endif


ccflags-$(CONFIG_LEANCRYPTO_DILITHIUM)					       \
				+= -I$(PWD)/../signature/src
ifdef CONFIG_LEANCRYPTO_DILITHIUM
obj-m		  		+= dilithium_tester_c.o
obj-m		  		+= dilithium_tester_common.o
obj-m		  		+= dilithium_invalid_tester.o

dilithium_tester_c-y		+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_c.o     \
				   ../drng/src/selftest_rng.o

dilithium_tester_common-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_common.o\
				   ../drng/src/selftest_rng.o

dilithium_invalid_tester-y	+= ../signature/tests/dilithium_invalid_tester.o
endif

ifdef CONFIG_LEANCRYPTO_DILITHIUM_ED25519
obj-m		  		+= dilithium_ed25519_tester.o

dilithium_ed25519_tester-y	+= ../signature/tests/dilithium_ed25519_tester.o\
				   ../drng/src/selftest_rng.o
endif

ifdef CONFIG_X86_64
ifdef CONFIG_LEANCRYPTO_DILITHIUM
obj-m				+= dilithium_tester_avx2.o
obj-m				+= dilithium_tester_iuf_avx2.o

dilithium_tester_avx2-y		+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_avx2.o  \
				   ../drng/src/selftest_rng.o
dilithium_tester_iuf_avx2-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_iuf_avx2.o\
				   ../drng/src/selftest_rng.o
endif
endif

ifdef CONFIG_ARM64
# Disable code for now as NEON support is needed
ifdef CONFIG_LEANCRYPTO_DILITHIUM
obj-m				+= dilithium_tester_armv8.o
obj-m				+= dilithium_tester_iuf_armv8.o

dilithium_tester_armv8-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_armv8.o \
				   ../drng/src/selftest_rng.o
dilithium_tester_iuf_armv8-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_iuf_armv8.o\
				   ../drng/src/selftest_rng.o
endif
endif

ifdef CONFIG_ARM
ifdef CONFIG_LEANCRYPTO_DILITHIUM
obj-m				+= dilithium_tester_armv7.o
obj-m				+= dilithium_tester_iuf_armv7.o

dilithium_tester_armv7-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_armv7.o \
				   ../drng/src/selftest_rng.o
dilithium_tester_iuf_armv7-y	+= ../signature/tests/dilithium_tester.o       \
				   ../signature/tests/dilithium_tester_iuf_armv7.o\
				   ../drng/src/selftest_rng.o
endif
endif

# Symmetric implementation
ccflags-y	 		+= -I$(PWD)/../sym/api -I$(PWD)/../sym/src
leancrypto-y	 		+= ../sym/src/sym.o

leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/aes.o			       \
				   ../sym/src/aes_block.o		       \
				   ../sym/src/aes_selector.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/asm/AESNI_x86_64/aes_aesni_x86_64.o\
				   ../sym/src/aes_block_aesni.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/aes_block_aesni_null.o
endif

ifdef CONFIG_ARM64
asflags-$(CONFIG_LEANCRYPTO_AES)					       \
				+= -march=armv8-a+crypto
leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/asm/ARMv8/aes_armv8_ce.o	       \
				   ../sym/src/aes_block_armce_v8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/aes_block_armce_v8_null.o
endif

ifneq ($(and $(CONFIG_RISCV),$(CONFIG_64BIT)),)
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/asm/riscv64/riscv64_aes_asm.o    \
				   ../sym/src/aes_block_riscv64.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES)					       \
				+= ../sym/src/aes_block_riscv64_null.o
endif

ifdef CONFIG_LEANCRYPTO_AES
obj-m				+= aes_dec_tester.o
obj-m				+= aes_enc_tester.o
aes_dec_tester-y		+= ../sym/tests/aes_dec_tester.o
aes_enc_tester-y		+= ../sym/tests/aes_enc_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc.o			       \
				   ../sym/src/mode_cbc.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_aesni.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_aesni_null.o
endif

ifdef CONFIG_ARM64
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_armce_v8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_armce_v8_null.o
endif

ifneq ($(and $(CONFIG_RISCV),$(CONFIG_64BIT)),)
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_riscv64.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CBC)					       \
				+= ../sym/src/aes_cbc_riscv64_null.o
endif

ifdef CONFIG_LEANCRYPTO_AES_CBC
obj-m				+= aes_cbc_dec_tester.o
obj-m				+= aes_cbc_enc_tester.o
aes_cbc_dec_tester-y		+= ../sym/tests/aes_cbc_dec_tester.o
aes_cbc_enc_tester-y		+= ../sym/tests/aes_cbc_enc_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr.o			       \
				   ../sym/src/mode_ctr.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_aesni.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_aesni_null.o
endif

ifdef CONFIG_ARM64
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_armce_v8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_armce_v8_null.o
endif

ifneq ($(and $(CONFIG_RISCV),$(CONFIG_64BIT)),)
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_riscv64.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_CTR)					       \
				+= ../sym/src/aes_ctr_riscv64_null.o
endif

ifdef CONFIG_LEANCRYPTO_AES_CTR
obj-m		  		+= aes_ctr_tester.o
aes_ctr_tester-y		+= ../sym/tests/aes_ctr_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw.o			       \
				   ../sym/src/mode_kw.o

ifdef CONFIG_X86_64
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_aesni.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_aesni_null.o
endif

ifdef CONFIG_ARM64
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_armce_v8.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_armce_v8_null.o
endif

ifneq ($(and $(CONFIG_RISCV),$(CONFIG_64BIT)),)
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_riscv64.o
else
leancrypto-$(CONFIG_LEANCRYPTO_AES_KW)					       \
				+= ../sym/src/aes_kw_riscv64_null.o
endif

ifdef CONFIG_LEANCRYPTO_AES_KW
obj-m				+= aes_kw_tester.o
aes_kw_tester-y			+= ../sym/tests/aes_kw_tester.o
endif

leancrypto-$(CONFIG_LEANCRYPTO_CHACHA20)				       \
				+= ../sym/src/chacha20.o
ifdef CONFIG_LEANCRYPTO_CHACHA20
obj-m				+= chacha20_block_tester.o
obj-m				+= chacha20_stream_tester.o
chacha20_block_tester-y		+= ../sym/tests/chacha20_block_tester.o
chacha20_stream_tester-y	+= ../sym/tests/chacha20_stream_tester.o
endif
